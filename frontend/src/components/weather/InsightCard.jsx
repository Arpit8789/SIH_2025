// src/components/weather/InsightCard.jsx - AI FARMING INSIGHTS COMPONENT
import React from 'react';
import {
  Brain,
  Lightbulb,
  AlertCircle,
  CheckCircle,
  Clock,
  Droplets,
  Thermometer,
  Wind,
  Bug,
  Wheat,
  Calendar,
  Target,
  TrendingUp
} from 'lucide-react';

const InsightCard = ({ insights, isLoading = false, className = '' }) => {
  if (isLoading) {
    return (
      <div className={`bg-white rounded-xl shadow-lg border p-6 ${className}`}>
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          <div className="h-20 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  if (!insights) {
    return (
      <div className={`bg-white rounded-xl shadow-lg border p-6 ${className}`}>
        <div className="text-center py-8">
          <Brain className="h-12 w-12 text-gray-300 mx-auto mb-4" />
          <p className="text-gray-500">AI insights not available</p>
        </div>
      </div>
    );
  }

  const getPriorityColor = (priority) => {
    switch (priority?.toLowerCase()) {
      case 'high':
        return 'bg-red-50 border-red-200 text-red-800';
      case 'medium':
        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      case 'low':
        return 'bg-green-50 border-green-200 text-green-800';
      default:
        return 'bg-blue-50 border-blue-200 text-blue-800';
    }
  };

  const getPriorityIcon = (priority) => {
    switch (priority?.toLowerCase()) {
      case 'high':
        return <AlertCircle className="h-4 w-4 text-red-600" />;
      case 'medium':
        return <Clock className="h-4 w-4 text-yellow-600" />;
      case 'low':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      default:
        return <Lightbulb className="h-4 w-4 text-blue-600" />;
    }
  };

  return (
    <div className={`bg-gradient-to-br from-purple-50 to-blue-50 rounded-xl shadow-lg border border-purple-200 ${className}`}>
      {/* Header */}
      <div className="p-6 border-b border-purple-200">
        <div className="flex items-center gap-3 mb-2">
          <div className="p-2 bg-purple-100 rounded-lg">
            <Brain className="h-6 w-6 text-purple-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-purple-800">
              ü§ñ AI Farming Insights
            </h3>
            <p className="text-sm text-purple-600">
              ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§ñ‡•á‡§§‡•Ä ‡§∏‡•Å‡§ù‡§æ‡§µ - Gemini AI ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ
            </p>
          </div>
        </div>
        {insights.source && (
          <div className="flex items-center gap-2 text-xs text-purple-700">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span>Generated by {insights.source}</span>
            <span>‚Ä¢</span>
            <span>{new Date(insights.generatedAt).toLocaleTimeString('en-IN')}</span>
          </div>
        )}
      </div>

      {/* Daily Actions */}
      {insights.dailyActions && insights.dailyActions.length > 0 && (
        <div className="p-6 border-b border-purple-100">
          <h4 className="text-md font-semibold text-purple-800 mb-4 flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            Daily Action Plan
          </h4>
          <div className="space-y-3">
            {insights.dailyActions.map((dayAction, index) => (
              <div
                key={index}
                className={`p-4 rounded-lg border ${getPriorityColor(dayAction.priority)}`}
              >
                <div className="flex items-center justify-between mb-2">
                  <h5 className="font-medium flex items-center gap-2">
                    {getPriorityIcon(dayAction.priority)}
                    {dayAction.day}
                  </h5>
                  <span className={`text-xs px-2 py-1 rounded-full bg-white bg-opacity-50`}>
                    {dayAction.priority} priority
                  </span>
                </div>
                <ul className="space-y-1 mb-2">
                  {dayAction.actions.map((action, actionIndex) => (
                    <li key={actionIndex} className="text-sm flex items-start gap-2">
                      <span className="w-1.5 h-1.5 bg-current rounded-full mt-2 opacity-60"></span>
                      <span>{action}</span>
                    </li>
                  ))}
                </ul>
                {dayAction.reasoning && (
                  <p className="text-xs opacity-75 mt-2 italic">
                    üí° {dayAction.reasoning}
                  </p>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Warnings */}
      {insights.warnings && insights.warnings.length > 0 && (
        <div className="p-6 border-b border-purple-100">
          <h4 className="text-md font-semibold text-red-800 mb-4 flex items-center gap-2">
            <AlertCircle className="h-4 w-4" />
            Weather Warnings
          </h4>
          <div className="space-y-3">
            {insights.warnings.map((warning, index) => (
              <div
                key={index}
                className="p-4 bg-red-50 border border-red-200 rounded-lg"
              >
                <div className="flex items-start gap-3">
                  <AlertCircle className="h-5 w-5 text-red-600 mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium text-red-800 mb-1">
                      {warning.message}
                    </p>
                    {warning.timeframe && (
                      <p className="text-xs text-red-600 mb-2">
                        ‚è∞ {warning.timeframe}
                      </p>
                    )}
                    {warning.actions && (
                      <ul className="text-xs text-red-700 space-y-1">
                        {warning.actions.map((action, actionIndex) => (
                          <li key={actionIndex} className="flex items-center gap-2">
                            <span className="w-1 h-1 bg-red-600 rounded-full"></span>
                            {action}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Crop Advice */}
      {insights.cropAdvice && insights.cropAdvice.length > 0 && (
        <div className="p-6 border-b border-purple-100">
          <h4 className="text-md font-semibold text-green-800 mb-4 flex items-center gap-2">
            <Wheat className="h-4 w-4" />
            Crop-Specific Advice
          </h4>
          <div className="grid gap-3">
            {insights.cropAdvice.map((advice, index) => (
              <div
                key={index}
                className="p-4 bg-green-50 border border-green-200 rounded-lg"
              >
                <div className="flex items-start justify-between mb-2">
                  <h5 className="font-medium text-green-800 capitalize flex items-center gap-2">
                    üåæ {advice.crop}
                  </h5>
                  {advice.expectedImpact && (
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      advice.expectedImpact === 'positive' 
                        ? 'bg-green-200 text-green-800'
                        : advice.expectedImpact === 'negative'
                        ? 'bg-red-200 text-red-800'
                        : 'bg-gray-200 text-gray-800'
                    }`}>
                      {advice.expectedImpact}
                    </span>
                  )}
                </div>
                
                {advice.currentCondition && (
                  <p className="text-sm text-green-700 mb-2">
                    <strong>Current:</strong> {advice.currentCondition}
                  </p>
                )}
                
                <p className="text-sm text-green-800">
                  {advice.advice}
                </p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Additional Insights Sections */}
      <div className="p-6 space-y-4">
        
        {/* Irrigation */}
        {insights.irrigation && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h5 className="font-medium text-blue-800 mb-2 flex items-center gap-2">
              <Droplets className="h-4 w-4" />
              Irrigation Guidance
            </h5>
            <div className="text-sm text-blue-700 space-y-1">
              <p><strong>Recommendation:</strong> {insights.irrigation.recommendation}</p>
              <p><strong>Best Time:</strong> {insights.irrigation.timing}</p>
              <p><strong>Quantity:</strong> {insights.irrigation.quantity}</p>
              <p><strong>Frequency:</strong> {insights.irrigation.frequency}</p>
            </div>
          </div>
        )}

        {/* Field Work */}
        {insights.fieldWork && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h5 className="font-medium text-yellow-800 mb-2 flex items-center gap-2">
              <Target className="h-4 w-4" />
              Field Work Schedule
            </h5>
            <div className="text-sm text-yellow-700 space-y-2">
              {insights.fieldWork.recommended && (
                <div>
                  <p className="font-medium">‚úÖ Recommended:</p>
                  <ul className="pl-4 space-y-1">
                    {insights.fieldWork.recommended.map((item, index) => (
                      <li key={index}>‚Ä¢ {item}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {insights.fieldWork.avoid && (
                <div>
                  <p className="font-medium">‚ùå Avoid:</p>
                  <ul className="pl-4 space-y-1">
                    {insights.fieldWork.avoid.map((item, index) => (
                      <li key={index}>‚Ä¢ {item}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {insights.fieldWork.timing && (
                <p><strong>Best Time:</strong> {insights.fieldWork.timing}</p>
              )}
            </div>
          </div>
        )}

        {/* Pest & Disease */}
        {insights.pestDisease && (
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
            <h5 className="font-medium text-orange-800 mb-2 flex items-center gap-2">
              <Bug className="h-4 w-4" />
              Pest & Disease Risk
            </h5>
            <div className="text-sm text-orange-700 space-y-1">
              <p><strong>Risk Level:</strong> 
                <span className={`ml-1 px-2 py-1 rounded-full text-xs ${
                  insights.pestDisease.risk === 'high' 
                    ? 'bg-red-200 text-red-800'
                    : insights.pestDisease.risk === 'medium'
                    ? 'bg-yellow-200 text-yellow-800'
                    : 'bg-green-200 text-green-800'
                }`}>
                  {insights.pestDisease.risk}
                </span>
              </p>
              
              {insights.pestDisease.likely && (
                <div>
                  <p className="font-medium">Likely Issues:</p>
                  <ul className="pl-4">
                    {insights.pestDisease.likely.map((item, index) => (
                      <li key={index}>‚Ä¢ {item}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {insights.pestDisease.prevention && (
                <div>
                  <p className="font-medium">Prevention:</p>
                  <ul className="pl-4">
                    {insights.pestDisease.prevention.map((item, index) => (
                      <li key={index}>‚Ä¢ {item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Weekly Planning Footer */}
      {insights.weeklyPlanning && (
        <div className="p-6 bg-gradient-to-r from-purple-100 to-blue-100 rounded-b-xl border-t border-purple-200">
          <h4 className="font-semibold text-purple-800 mb-2 flex items-center gap-2">
            <TrendingUp className="h-4 w-4" />
            ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ (Weekly Planning)
          </h4>
          <p className="text-sm text-purple-700 leading-relaxed">
            {insights.weeklyPlanning}
          </p>
        </div>
      )}
    </div>
  );
};

export default InsightCard;
