// src/pages/features/MarketPrices.jsx - UPDATED WITH YOUR THEME & API INTEGRATION
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search,
  TrendingUp,
  TrendingDown,
  BarChart3,
  MapPin,
  Calendar,
  RefreshCw,
  Sun,
  Moon,
  Filter,
  ArrowUpRight,
  ArrowDownRight,
  Minus,
  Bell,
  ChevronDown,
  Eye,
  Download,
  Share2
} from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { useAuth } from '@/hooks/useAuth';
import { useLanguage } from '@/hooks/useLanguage';
import { useMarketData } from '@/hooks/useMarketData';

const MarketPrices = () => {
  const { user } = useAuth();
  const { currentLanguage, t } = useLanguage();
  const { 
    marketData, 
    loading, 
    error, 
    fetchMarketData, 
    refreshData,
    hasData,
    currentPrice,
    trend,
    recommendation
  } = useMarketData();

  // State management
  const [darkMode, setDarkMode] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCrop, setSelectedCrop] = useState('wheat');
  const [selectedState, setSelectedState] = useState(user?.location || 'Punjab');
  const [selectedMarket, setSelectedMarket] = useState('');
  const [sortBy, setSortBy] = useState('name');
  const [showFilters, setShowFilters] = useState(false);
  const [priceHistory, setPriceHistory] = useState([]);
  const [lastUpdated, setLastUpdated] = useState(null);

  // Popular crops data
  const popularCrops = [
    { id: 'wheat', name: { en: 'Wheat', hi: '‡§ó‡•á‡§π‡•Ç‡§Ç', pa: '‡®ï‡®£‡®ï' }, icon: 'üåæ', category: 'cereals' },
    { id: 'rice', name: { en: 'Rice', hi: '‡§ö‡§æ‡§µ‡§≤', pa: '‡®ö‡®æ‡®µ‡®≤' }, icon: 'üåæ', category: 'cereals' },
    { id: 'maize', name: { en: 'Maize', hi: '‡§Æ‡§ï‡•ç‡§ï‡§æ', pa: '‡®Æ‡©±‡®ï‡©Ä' }, icon: 'üåΩ', category: 'cereals' },
    { id: 'cotton', name: { en: 'Cotton', hi: '‡§ï‡§™‡§æ‡§∏', pa: '‡®ï‡®™‡®æ‡®π' }, icon: 'üåø', category: 'cash_crop' },
    { id: 'soybean', name: { en: 'Soybean', hi: '‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®', pa: '‡®∏‡©ã‡®á‡®Ü‡®¨‡©Ä‡®®' }, icon: 'ü´ò', category: 'oilseed' },
    { id: 'onion', name: { en: 'Onion', hi: '‡§™‡•ç‡§Ø‡§æ‡§ú', pa: '‡®™‡®ø‡®Ü‡®ú‡®º' }, icon: 'üßÖ', category: 'vegetable' },
    { id: 'potato', name: { en: 'Potato', hi: '‡§Ü‡§≤‡•Ç', pa: '‡®Ü‡®≤‡©Ç' }, icon: 'ü•î', category: 'vegetable' },
    { id: 'tomato', name: { en: 'Tomato', hi: '‡§ü‡§Æ‡§æ‡§ü‡§∞', pa: '‡®ü‡®Æ‡®æ‡®ü‡®∞' }, icon: 'üçÖ', category: 'vegetable' }
  ];

  // States data
  const states = [
    { id: 'punjab', name: { en: 'Punjab', hi: '‡§™‡§Ç‡§ú‡§æ‡§¨', pa: '‡®™‡©∞‡®ú‡®æ‡®¨' } },
    { id: 'haryana', name: { en: 'Haryana', hi: '‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ', pa: '‡®π‡®∞‡®ø‡®Ü‡®£‡®æ' } },
    { id: 'uttar-pradesh', name: { en: 'Uttar Pradesh', hi: '‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', pa: '‡®â‡©±‡®§‡®∞ ‡®™‡©ç‡®∞‡®¶‡©á‡®∏‡®º' } },
    { id: 'madhya-pradesh', name: { en: 'Madhya Pradesh', hi: '‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', pa: '‡®Æ‡©±‡®ß ‡®™‡©ç‡®∞‡®¶‡©á‡®∏‡®º' } },
    { id: 'rajasthan', name: { en: 'Rajasthan', hi: '‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®', pa: '‡®∞‡®æ‡®ú‡®∏‡®•‡®æ‡®®' } }
  ];

  // Load market data on component mount
  useEffect(() => {
    fetchMarketData(selectedCrop, selectedState, selectedMarket);
  }, [selectedCrop, selectedState, selectedMarket, fetchMarketData]);

  // Generate mock price history when market data changes
  useEffect(() => {
    if (hasData && marketData) {
      generatePriceHistory();
    }
  }, [hasData, marketData]);

  // Generate mock price history for charts
  const generatePriceHistory = () => {
    const history = [];
    const basePrice = currentPrice || 2000;
    
    for (let i = 29; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      
      const variation = (Math.random() - 0.5) * 0.1; // ¬±5% variation
      const price = Math.round(basePrice * (1 + variation));
      
      history.push({
        date: date.toLocaleDateString('en-IN', { month: 'short', day: 'numeric' }),
        price: price,
        modalPrice: price,
        volume: Math.round(Math.random() * 1000) + 500
      });
    }
    
    setPriceHistory(history);
    setLastUpdated(new Date());
  };

  // Handle search and filters
  const handleSearch = async () => {
    await fetchMarketData(selectedCrop, selectedState, selectedMarket);
  };

  const handleRefresh = async () => {
    await refreshData();
    generatePriceHistory();
  };

  // Format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      maximumFractionDigits: 0
    }).format(amount);
  };

  // Get price trend icon
  const getTrendIcon = (trend) => {
    switch (trend?.toLowerCase()) {
      case 'rising':
        return <TrendingUp className="h-4 w-4 text-green-600" />;
      case 'falling':
        return <TrendingDown className="h-4 w-4 text-red-600" />;
      default:
        return <Minus className="h-4 w-4 text-gray-600" />;
    }
  };

  // Get recommendation color
  const getRecommendationColor = (action) => {
    switch (action?.toLowerCase()) {
      case 'sell':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'hold':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'wait':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Get crop display name
  const getCropName = (crop) => {
    const cropData = popularCrops.find(c => c.id === crop.id);
    return cropData?.name[currentLanguage] || cropData?.name.en || crop.name;
  };

  return (
    <div className={`min-h-screen transition-colors duration-300 ${
      darkMode 
        ? 'dark bg-gray-900' 
        : 'bg-gradient-to-br from-green-50 via-emerald-50 to-yellow-50'
    }`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 space-y-6">
        
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col sm:flex-row sm:items-center justify-between gap-4"
        >
          <div>
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-2">
              üìà {currentLanguage === 'hi' ? '‡§¨‡§æ‡§ú‡§º‡§æ‡§∞ ‡§≠‡§æ‡§µ' : currentLanguage === 'pa' ? '‡®¨‡®æ‡®ú‡®º‡®æ‡®∞ ‡®¶‡©á ‡®≠‡®æ‡®Ö' : 'Market Prices'}
            </h1>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              {currentLanguage === 'hi' ? '‡§∞‡•Ä‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§ï‡•É‡§∑‡§ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§è‡§µ‡§Ç ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£' : 
               currentLanguage === 'pa' ? '‡®∞‡©Ä‡®Ö‡®≤-‡®ü‡®æ‡®à‡®Æ ‡®ñ‡©á‡®§‡©Ä ‡®â‡®§‡®™‡®æ‡®¶ ‡®¶‡©á ‡®≠‡®æ‡®Ö ‡®Ö‡®§‡©á ‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®µ‡®ø‡®∏‡®º‡®≤‡©á‡®∏‡®º‡®£' :
               'Real-time agricultural commodity prices & market analysis'}
            </p>
          </div>
          
          <div className="flex items-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setDarkMode(!darkMode)}
              className="p-2"
            >
              {darkMode ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefresh}
              disabled={loading}
              className="flex items-center gap-2"
            >
              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              {currentLanguage === 'hi' ? '‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂' : currentLanguage === 'pa' ? '‡®§‡®æ‡®ú‡®º‡®æ ‡®ï‡®∞‡©ã' : 'Refresh'}
            </Button>
          </div>
        </motion.div>

        {/* Search and Filters */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 border border-gray-200 dark:border-gray-700"
        >
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Crop Selection */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                {currentLanguage === 'hi' ? '‡§´‡§∏‡§≤' : currentLanguage === 'pa' ? '‡®´‡®∏‡®≤' : 'Crop'}
              </label>
              <Select value={selectedCrop} onValueChange={setSelectedCrop}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select crop" />
                </SelectTrigger>
                <SelectContent>
                  {popularCrops.map(crop => (
                    <SelectItem key={crop.id} value={crop.id}>
                      <div className="flex items-center gap-2">
                        <span>{crop.icon}</span>
                        <span>{getCropName(crop)}</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* State Selection */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                {currentLanguage === 'hi' ? '‡§∞‡§æ‡§ú‡•ç‡§Ø' : currentLanguage === 'pa' ? '‡®∞‡®æ‡®ú' : 'State'}
              </label>
              <Select value={selectedState} onValueChange={setSelectedState}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select state" />
                </SelectTrigger>
                <SelectContent>
                  {states.map(state => (
                    <SelectItem key={state.id} value={state.id}>
                      {state.name[currentLanguage] || state.name.en}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Market Selection */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                {currentLanguage === 'hi' ? '‡§Æ‡§Ç‡§°‡•Ä' : currentLanguage === 'pa' ? '‡®Æ‡©∞‡®°‡©Ä' : 'Market'}
              </label>
              <Input
                placeholder={currentLanguage === 'hi' ? '‡§Æ‡§Ç‡§°‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ' : currentLanguage === 'pa' ? '‡®Æ‡©∞‡®°‡©Ä ‡®¶‡®æ ‡®®‡®æ‡®Æ' : 'Market name'}
                value={selectedMarket}
                onChange={(e) => setSelectedMarket(e.target.value)}
              />
            </div>

            {/* Search Button */}
            <div className="flex items-end">
              <Button
                onClick={handleSearch}
                disabled={loading}
                className="w-full bg-green-600 hover:bg-green-700 text-white"
              >
                {loading ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    {currentLanguage === 'hi' ? '‡§ñ‡•ã‡§ú ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...' : currentLanguage === 'pa' ? '‡®ñ‡©ã‡®ú ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...' : 'Searching...'}
                  </>
                ) : (
                  <>
                    <Search className="h-4 w-4 mr-2" />
                    {currentLanguage === 'hi' ? '‡§ñ‡•ã‡§ú‡•á‡§Ç' : currentLanguage === 'pa' ? '‡®ñ‡©ã‡®ú‡©ã' : 'Search'}
                  </>
                )}
              </Button>
            </div>
          </div>
        </motion.div>

        {/* Error Display */}
        {error && (
          <Alert className="border-red-200 bg-red-50 dark:bg-red-900/20">
            <AlertDescription className="text-red-800 dark:text-red-200">
              {error}
            </AlertDescription>
          </Alert>
        )}

        {/* Market Data Display */}
        {hasData && marketData && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Main Price Information */}
            <div className="lg:col-span-2 space-y-6">
              {/* Current Prices */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="grid grid-cols-1 md:grid-cols-3 gap-4"
              >
                {/* Minimum Price */}
                <Card className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-green-200 dark:border-green-800">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-semibold text-green-700 dark:text-green-400">
                        {currentLanguage === 'hi' ? '‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø' : currentLanguage === 'pa' ? '‡®ò‡©±‡®ü‡©ã-‡®ò‡©±‡®ü ‡®ï‡©Ä‡®Æ‡®§' : 'Minimum Price'}
                      </span>
                      <TrendingDown className="h-4 w-4 text-green-600" />
                    </div>
                    <div className="text-xl font-bold text-green-800 dark:text-green-300">
                      {formatCurrency(marketData.current?.minPrice || currentPrice * 0.9)}/quintal
                    </div>
                    <div className="text-xs text-green-600 dark:text-green-400">
                      {currentLanguage === 'hi' ? '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ' : currentLanguage === 'pa' ? '‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®ò‡©±‡®ü‡©ã-‡®ò‡©±‡®ü' : 'Market Minimum'}
                    </div>
                  </CardContent>
                </Card>

                {/* Modal Price */}
                <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-200 dark:border-blue-800">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-semibold text-blue-700 dark:text-blue-400">
                        {currentLanguage === 'hi' ? '‡§î‡§∏‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø' : currentLanguage === 'pa' ? '‡®î‡®∏‡®§ ‡®ï‡©Ä‡®Æ‡®§' : 'Modal Price'}
                      </span>
                      {getTrendIcon(trend)}
                    </div>
                    <div className="text-xl font-bold text-blue-800 dark:text-blue-300">
                      {formatCurrency(currentPrice)}/quintal
                    </div>
                    <div className="text-xs text-blue-600 dark:text-blue-400">
                      {currentLanguage === 'hi' ? '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¶‡§∞' : currentLanguage === 'pa' ? '‡®Æ‡©Å‡©±‡®ñ ‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®∞‡©á‡®ü' : 'Main Market Rate'}
                    </div>
                  </CardContent>
                </Card>

                {/* Maximum Price */}
                <Card className="bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 border-orange-200 dark:border-orange-800">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-semibold text-orange-700 dark:text-orange-400">
                        {currentLanguage === 'hi' ? '‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø' : currentLanguage === 'pa' ? '‡®µ‡©±‡®ß ‡®§‡©ã‡®Ç ‡®µ‡©±‡®ß ‡®ï‡©Ä‡®Æ‡®§' : 'Maximum Price'}
                      </span>
                      <TrendingUp className="h-4 w-4 text-orange-600" />
                    </div>
                    <div className="text-xl font-bold text-orange-800 dark:text-orange-300">
                      {formatCurrency(marketData.current?.maxPrice || currentPrice * 1.1)}/quintal
                    </div>
                    <div className="text-xs text-orange-600 dark:text-orange-400">
                      {currentLanguage === 'hi' ? '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ' : currentLanguage === 'pa' ? '‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®µ‡©±‡®ß ‡®§‡©ã‡®Ç ‡®µ‡©±‡®ß' : 'Market Maximum'}
                    </div>
                  </CardContent>
                </Card>
              </motion.div>

              {/* Price Chart */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 }}
              >
                <Card className="bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <BarChart3 className="h-5 w-5 text-green-600" />
                      {currentLanguage === 'hi' ? '30-‡§¶‡§ø‡§® ‡§ï‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§∞‡•Å‡§ù‡§æ‡§®' : 
                       currentLanguage === 'pa' ? '30-‡®¶‡®ø‡®® ‡®¶‡©á ‡®≠‡®æ‡®Ö ‡®¶‡®æ ‡®∞‡©Å‡®ù‡®æ‡®®' : 
                       '30-Day Price Trend'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={priceHistory}>
                        <CartesianGrid strokeDasharray="3 3" className="dark:stroke-gray-600" />
                        <XAxis dataKey="date" className="dark:fill-gray-400" />
                        <YAxis className="dark:fill-gray-400" />
                        <Tooltip 
                          formatter={(value) => [formatCurrency(value), 'Price']}
                          labelFormatter={(label) => `Date: ${label}`}
                          contentStyle={{ 
                            backgroundColor: darkMode ? '#1f2937' : '#ffffff',
                            border: '1px solid #e5e7eb',
                            borderRadius: '8px'
                          }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="price" 
                          stroke="#10b981" 
                          strokeWidth={3} 
                          dot={{ fill: '#10b981', strokeWidth: 2 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              </motion.div>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Selling Recommendation */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
              >
                <Card className="bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800">
                  <CardHeader>
                    <CardTitle className="text-sm font-semibold text-yellow-900 dark:text-yellow-400 flex items-center gap-2">
                      <Eye className="h-4 w-4" />
                      {currentLanguage === 'hi' ? '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡•Å‡§ù‡§æ‡§µ' : currentLanguage === 'pa' ? '‡®µ‡©á‡®ö‡®£ ‡®¶‡©Ä ‡®∏‡®≤‡®æ‡®π' : 'Selling Recommendation'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {marketData.recommendation ? (
                      <>
                        <div className={`text-center p-3 rounded-xl mb-3 border ${getRecommendationColor(marketData.recommendation.action)}`}>
                          <div className="text-2xl mb-1">
                            {marketData.recommendation.action === 'sell' ? '‚úÖ' : 
                             marketData.recommendation.action === 'hold' ? '‚è≥' : '‚è∏Ô∏è'}
                          </div>
                          <div className="font-bold text-sm">
                            {currentLanguage === 'hi' ? 
                              (marketData.recommendation.action === 'sell' ? '‡§Ö‡§≠‡•Ä ‡§¨‡•á‡§ö‡•á‡§Ç' : 
                               marketData.recommendation.action === 'hold' ? '‡§∞‡•Å‡§ï‡•á‡§Ç' : '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç') :
                             currentLanguage === 'pa' ?
                              (marketData.recommendation.action === 'sell' ? '‡®π‡©Å‡®£ ‡®µ‡©á‡®ö‡©ã' : 
                               marketData.recommendation.action === 'hold' ? '‡®∞‡©Å‡®ï‡©ã' : '‡®á‡©∞‡®§‡®ú‡®º‡®æ‡®∞ ‡®ï‡®∞‡©ã') :
                              (marketData.recommendation.action === 'sell' ? 'SELL NOW' : 
                               marketData.recommendation.action === 'hold' ? 'HOLD' : 'WAIT')}
                          </div>
                          <div className="text-xs opacity-80">
                            {marketData.recommendation.confidence}% {currentLanguage === 'hi' ? '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏' : currentLanguage === 'pa' ? '‡®≠‡®∞‡©ã‡®∏‡®æ' : 'confidence'}
                          </div>
                        </div>
                        <div className="text-xs text-yellow-800 dark:text-yellow-200 space-y-1">
                          <p>
                            <strong>{currentLanguage === 'hi' ? '‡§ï‡§æ‡§∞‡§£:' : currentLanguage === 'pa' ? '‡®ï‡®æ‡®∞‡®®:' : 'Reason:'}</strong> {marketData.recommendation.reason}
                          </p>
                        </div>
                      </>
                    ) : (
                      <div className="text-center text-gray-500 dark:text-gray-400">
                        {currentLanguage === 'hi' ? '‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : currentLanguage === 'pa' ? '‡®°‡©á‡®ü‡®æ ‡®≤‡©ã‡®° ‡®π‡©ã ‡®∞‡®ø‡®π‡®æ ‡®π‡©à...' : 'Loading recommendation...'}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </motion.div>

              {/* Quick Stats */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.1 }}
              >
                <Card className="bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-sm font-semibold">
                      {currentLanguage === 'hi' ? '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§Ü‡§Ç‡§ï‡§°‡§º‡•á' : currentLanguage === 'pa' ? '‡®§‡©Å‡®∞‡©∞‡®§ ‡®Ö‡©∞‡®ï‡©ú‡©á' : 'Quick Stats'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600 dark:text-gray-400">
                        {currentLanguage === 'hi' ? '‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§ï‡•Ä‡§Æ‡§§:' : currentLanguage === 'pa' ? '‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®ï‡©Ä‡®Æ‡®§:' : 'Current Price:'}
                      </span>
                      <span className="font-bold text-green-600 dark:text-green-400">
                        {formatCurrency(currentPrice)}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600 dark:text-gray-400">
                        {currentLanguage === 'hi' ? '‡§∞‡•Å‡§ù‡§æ‡§®:' : currentLanguage === 'pa' ? '‡®∞‡©Å‡®ù‡®æ‡®®:' : 'Trend:'}
                      </span>
                      <div className="flex items-center gap-1">
                        {getTrendIcon(trend)}
                        <span className="font-medium">
                          {currentLanguage === 'hi' ? 
                            (trend === 'rising' ? '‡§¨‡§¢‡§º ‡§∞‡§π‡§æ' : trend === 'falling' ? '‡§ó‡§ø‡§∞ ‡§∞‡§π‡§æ' : '‡§∏‡•ç‡§•‡§ø‡§∞') :
                           currentLanguage === 'pa' ?
                            (trend === 'rising' ? '‡®µ‡®ß ‡®∞‡®ø‡®π‡®æ' : trend === 'falling' ? '‡®ò‡®ü ‡®∞‡®ø‡®π‡®æ' : '‡®∏‡®•‡®ø‡®∞') :
                            trend || 'Stable'}
                        </span>
                      </div>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600 dark:text-gray-400">
                        {currentLanguage === 'hi' ? '‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü:' : currentLanguage === 'pa' ? '‡®Ö‡®ñ‡©Ä‡®∞‡®≤‡®æ ‡®Ö‡©±‡®™‡®°‡©á‡®ü:' : 'Last Updated:'}
                      </span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {lastUpdated ? lastUpdated.toLocaleTimeString('en-IN', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        }) : '-'}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>

              {/* Market Tips */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2 }}
              >
                <Card className="bg-gradient-to-br from-emerald-50 to-green-50 dark:from-emerald-900/20 dark:to-green-900/20 border-emerald-200 dark:border-emerald-800">
                  <CardHeader>
                    <CardTitle className="text-sm font-semibold text-emerald-900 dark:text-emerald-400">
                      üí° {currentLanguage === 'hi' ? '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç' : currentLanguage === 'pa' ? '‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®ü‡®ø‡®™‡®∏' : 'Market Tips'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2 text-xs text-emerald-800 dark:text-emerald-200">
                      <div className="flex items-start">
                        <span className="text-emerald-600 mr-2">‚Ä¢</span>
                        <span>
                          {currentLanguage === 'hi' ? '‡§¨‡•á‡§ö‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á 3+ ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç' : 
                           currentLanguage === 'pa' ? '‡®µ‡©á‡®ö‡®£ ‡®§‡©ã‡®Ç ‡®™‡®π‡®ø‡®≤‡®æ‡®Ç 3+ ‡®ñ‡®∞‡©Ä‡®¶‡®¶‡®æ‡®∞‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®§‡©Å‡®≤‡®®‡®æ ‡®ï‡®∞‡©ã' :
                           'Compare 3+ buyers before selling'}
                        </span>
                      </div>
                      <div className="flex items-start">
                        <span className="text-emerald-600 mr-2">‚Ä¢</span>
                        <span>
                          {currentLanguage === 'hi' ? '‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§î‡§∞ ‡§™‡•à‡§ï‡•á‡§ú‡§ø‡§Ç‡§ó ‡§≤‡§æ‡§ó‡§§ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç' : 
                           currentLanguage === 'pa' ? '‡®Ü‡®µ‡®æ‡®ú‡®æ‡®à ‡®Ö‡®§‡©á ‡®™‡©à‡®ï‡®ú‡®ø‡©∞‡®ó ‡®≤‡®æ‡®ó‡®§ ‡®µ‡©á‡®ñ‡©ã' :
                           'Check transport & packaging costs'}
                        </span>
                      </div>
                      <div className="flex items-start">
                        <span className="text-emerald-600 mr-2">‚Ä¢</span>
                        <span>
                          {currentLanguage === 'hi' ? '‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§Æ‡§æ‡§Ç‡§ó ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¨‡•á‡§ö‡•á‡§Ç' : 
                           currentLanguage === 'pa' ? '‡®Æ‡©å‡®∏‡®Æ‡©Ä ‡®Æ‡©∞‡®ó ‡®Ö‡®®‡©Å‡®∏‡®æ‡®∞ ‡®µ‡©á‡®ö‡©ã' :
                           'Sell according to seasonal demand'}
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            </div>
          </div>
        )}

        {/* Popular Crops Quick Access */}
        {!hasData && !loading && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <Card className="bg-white dark:bg-gray-800 text-center">
              <CardHeader>
                <CardTitle>
                  {currentLanguage === 'hi' ? '‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç' : currentLanguage === 'pa' ? '‡®Æ‡®∏‡®º‡®π‡©Ç‡®∞ ‡®´‡®∏‡®≤‡®æ‡®Ç' : 'Popular Crops'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
                  {popularCrops.map((crop) => (
                    <motion.button
                      key={crop.id}
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => {
                        setSelectedCrop(crop.id);
                        fetchMarketData(crop.id, selectedState, selectedMarket);
                      }}
                      className="p-4 bg-gradient-to-br from-gray-50 to-white dark:from-gray-700 dark:to-gray-800 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-green-200 dark:hover:border-green-600 hover:from-green-50 hover:to-emerald-50 dark:hover:from-green-900/20 dark:hover:to-emerald-900/20 transition-all duration-200"
                    >
                      <div className="text-2xl mb-2">{crop.icon}</div>
                      <div className="font-semibold text-gray-900 dark:text-gray-100 text-sm">
                        {getCropName(crop)}
                      </div>
                      <div className="text-xs text-gray-500 dark:text-gray-400 capitalize">
                        {crop.category.replace('_', ' ')}
                      </div>
                    </motion.button>
                  ))}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default MarketPrices;
