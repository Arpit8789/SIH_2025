// src/services/predictionService.js
import { calculateTrend, calculateVolatility, generateRecommendation, predictNextWeekPrices } from '@/utils/priceCalculations';
import marketDataService from './marketDataService';
import cropsData from '@/data/crops1.json';
import seasonalityData from '@/data/seasonality.json';

class PredictionService {
  constructor() {
    this.currentMonth = new Date().getMonth() + 1;
  }

  // Generate complete market analysis with AI recommendations
  async generateMarketAnalysis(cropId, state, market) {
    try {
      console.log(`üß† Generating analysis for ${cropId} in ${state}`);
      
      // Fetch current and historical data
      const [currentData, historicalData] = await Promise.all([
        marketDataService.fetchCurrentPrices(cropId, state, market),
        marketDataService.fetchHistoricalPrices(cropId, state, market, 30)
      ]);

      if (!currentData) {
        throw new Error('Unable to fetch current market data');
      }

      // Generate AI analysis
      const trendAnalysis = calculateTrend(historicalData);
      const volatility = calculateVolatility(historicalData);
      const recommendation = generateRecommendation(
        cropId, 
        currentData.modalPrice, 
        historicalData, 
        this.currentMonth
      );
      const predictions = predictNextWeekPrices(historicalData);
      const marketInsights = this.generateMarketInsights(cropId, currentData, trendAnalysis);
      const seasonalAdvice = this.getSeasonalAdvice(cropId, this.currentMonth);

      return {
        current: currentData,
        trend: trendAnalysis,
        volatility: volatility,
        recommendation: recommendation,
        predictions: predictions,
        insights: marketInsights,
        seasonalAdvice: seasonalAdvice,
        historicalData: historicalData.slice(-15), // Last 15 days for charts
        lastUpdated: new Date().toISOString(),
        confidence: this.calculateOverallConfidence(trendAnalysis, volatility, historicalData.length)
      };

    } catch (error) {
      console.error('‚ùå Failed to generate market analysis:', error);
      throw error;
    }
  }

  // Generate market insights and tips
  generateMarketInsights(cropId, currentData, trendAnalysis) {
    const crop = cropsData.crops.find(c => c.id === cropId);
    const seasonPattern = seasonalityData.pricePatterns[cropId];
    
    const insights = [];

    // Price comparison with average
    if (currentData.modalPrice > crop.avgPrice * 1.1) {
      insights.push({
        type: 'positive',
        message: {
          en: `Current price is ${Math.round(((currentData.modalPrice / crop.avgPrice) - 1) * 100)}% above average`,
          hi: `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§æ‡§Æ ‡§î‡§∏‡§§ ‡§∏‡•á ${Math.round(((currentData.modalPrice / crop.avgPrice) - 1) * 100)}% ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•à`,
          pa: `‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®≠‡®æ‡®Ö ‡®î‡®∏‡®§ ‡®®‡®æ‡®≤‡©ã‡®Ç ${Math.round(((currentData.modalPrice / crop.avgPrice) - 1) * 100)}% ‡®ú‡®º‡®ø‡®Ü‡®¶‡®æ ‡®π‡©à`
        }
      });
    } else if (currentData.modalPrice < crop.avgPrice * 0.9) {
      insights.push({
        type: 'negative',
        message: {
          en: `Current price is ${Math.round((1 - (currentData.modalPrice / crop.avgPrice)) * 100)}% below average`,
          hi: `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§æ‡§Æ ‡§î‡§∏‡§§ ‡§∏‡•á ${Math.round((1 - (currentData.modalPrice / crop.avgPrice)) * 100)}% ‡§ï‡§Æ ‡§π‡•à`,
          pa: `‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®≠‡®æ‡®Ö ‡®î‡®∏‡®§ ‡®®‡®æ‡®≤‡©ã‡®Ç ${Math.round((1 - (currentData.modalPrice / crop.avgPrice)) * 100)}% ‡®ò‡©±‡®ü ‡®π‡©à`
        }
      });
    }

    // Trend insights
    if (trendAnalysis.trend === 'RISING' && trendAnalysis.confidence > 70) {
      insights.push({
        type: 'positive',
        message: {
          en: `Strong upward trend detected with ${trendAnalysis.confidence}% confidence`,
          hi: `${trendAnalysis.confidence}% ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø‡§§‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§§‡•á‡§ú‡§º ‡§¨‡§¢‡§º‡•ã‡§§‡§∞‡•Ä ‡§ï‡§æ ‡§∞‡•Å‡§ù‡§æ‡§®`,
          pa: `${trendAnalysis.confidence}% ‡®≠‡®∞‡©ã‡®∏‡©á ‡®®‡®æ‡®≤ ‡®§‡©á‡®ú‡®º ‡®µ‡®ß‡®¶‡®æ ‡®∞‡©Å‡®ù‡®æ‡®® ‡®≤‡©±‡®≠‡®ø‡®Ü`
        }
      });
    }

    // Seasonal insights
    if (seasonPattern && seasonPattern.highPriceMonths.includes(this.currentMonth)) {
      insights.push({
        type: 'info',
        message: {
          en: `Currently in peak price season for ${crop.name.en}`,
          hi: `${crop.name.hi} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ö‡§∞‡§Æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ`,
          pa: `${crop.name.pa} ‡®≤‡®à ‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®∏‡®Æ‡©á‡®Ç ‡®ö‡©ã‡®ü‡©Ä ‡®¶‡©á ‡®≠‡®æ‡®Ö ‡®¶‡®æ ‡®Æ‡©å‡®∏‡®Æ ‡®π‡©à`
        }
      });
    }

    return insights;
  }

  // Get seasonal advice
  getSeasonalAdvice(cropId, currentMonth) {
    const seasonPattern = seasonalityData.pricePatterns[cropId];
    
    if (!seasonPattern) {
      return {
        en: 'Monitor market prices regularly for best selling opportunities',
        hi: '‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•á ‡§Ö‡§µ‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡•á‡§Ç',
        pa: '‡®∏‡®≠ ‡®§‡©ã‡®Ç ‡®µ‡®ß‡©Ä‡®Ü ‡®µ‡©á‡®ö‡®£ ‡®¶‡©á ‡®Æ‡©å‡®ï‡®ø‡®Ü‡®Ç ‡®≤‡®à ‡®®‡®ø‡®Ø‡®Æ‡®§ ‡®§‡©å‡®∞ \'‡®§‡©á ‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®¶‡©á ‡®≠‡®æ‡®µ‡®æ‡®Ç \'‡®§‡©á ‡®®‡®ú‡®º‡®∞ ‡®∞‡©±‡®ñ‡©ã'
      };
    }

    return seasonPattern.bestSellingAdvice;
  }

  // Calculate overall confidence score
  calculateOverallConfidence(trendAnalysis, volatility, dataPoints) {
    let confidence = 50; // Base confidence

    // Trend confidence contribution (30%)
    if (trendAnalysis.confidence) {
      confidence += (trendAnalysis.confidence - 50) * 0.3;
    }

    // Data quality contribution (25%)
    if (dataPoints >= 30) {
      confidence += 15;
    } else if (dataPoints >= 15) {
      confidence += 10;
    } else if (dataPoints >= 7) {
      confidence += 5;
    }

    // Volatility contribution (20%)
    if (volatility < 10) {
      confidence += 10;
    } else if (volatility < 20) {
      confidence += 5;
    } else if (volatility > 30) {
      confidence -= 10;
    }

    // Seasonal factor (15%)
    const crop = cropsData.crops.find(c => c.id === Object.keys(seasonalityData.pricePatterns)[0]);
    if (crop) {
      const seasonPattern = seasonalityData.pricePatterns[crop.id];
      if (seasonPattern && (seasonPattern.highPriceMonths.includes(this.currentMonth) || seasonPattern.lowPriceMonths.includes(this.currentMonth))) {
        confidence += 8;
      }
    }

    // Data source contribution (10%)
    confidence += 5; // Assuming reliable data source

    return Math.round(Math.max(30, Math.min(95, confidence)));
  }

  // Get quick market summary
  generateQuickSummary(cropId, analysis) {
    const crop = cropsData.crops.find(c => c.id === cropId);
    const recommendation = analysis.recommendation;
    
    return {
      action: recommendation.action,
      actionText: {
        en: recommendation.action === 'SELL' ? 'Sell Now' : recommendation.action === 'HOLD' ? 'Hold' : 'Wait',
        hi: recommendation.action === 'SELL' ? '‡§Ö‡§≠‡•Ä ‡§¨‡•á‡§ö‡•á‡§Ç' : recommendation.action === 'HOLD' ? '‡§∞‡•Å‡§ï‡•á‡§Ç' : '‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç',
        pa: recommendation.action === 'SELL' ? '‡®π‡©Å‡®£ ‡®µ‡©á‡®ö‡©ã' : recommendation.action === 'HOLD' ? '‡®∞‡©Å‡®ï‡©ã' : '‡®á‡©∞‡®§‡®ú‡®º‡®æ‡®∞ ‡®ï‡®∞‡©ã'
      },
      confidence: recommendation.confidence,
      priceStatus: {
        current: analysis.current.modalPrice,
        trend: analysis.trend.trend,
        change: analysis.trend.percentChange
      },
      nextAction: this.getNextActionAdvice(cropId, recommendation.action)
    };
  }

  // Get next action advice
  getNextActionAdvice(cropId, currentAction) {
    const advice = {
      'SELL': {
        en: 'Consider selling within next 2-3 days',
        hi: '‡§Ö‡§ó‡§≤‡•á 2-3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§ö‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç',
        pa: '‡®Ö‡®ó‡®≤‡©á 2-3 ‡®¶‡®ø‡®®‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®µ‡©á‡®ö‡®£ ‡®¨‡®æ‡®∞‡©á ‡®∏‡©ã‡®ö‡©ã'
      },
      'HOLD': {
        en: 'Monitor prices daily, sell within 1-2 weeks',
        hi: '‡§∞‡•ã‡§ú‡§º‡§æ‡§®‡§æ ‡§¶‡§æ‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡•á‡§Ç, 1-2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§ö‡•á‡§Ç',
        pa: '‡®∞‡©ã‡®ú‡®º‡®æ‡®®‡®æ ‡®≠‡®æ‡®µ‡®æ‡®Ç \'‡®§‡©á ‡®®‡®ú‡®º‡®∞ ‡®∞‡©±‡®ñ‡©ã, 1-2 ‡®π‡®´‡®º‡®§‡®ø‡®Ü‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®µ‡©á‡®ö‡©ã'
      },
      'WAIT': {
        en: 'Wait for better market conditions',
        hi: '‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§æ‡§ú‡§æ‡§∞‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç',
        pa: '‡®¨‡®ø‡®π‡®§‡®∞ ‡®Æ‡®æ‡®∞‡®ï‡©Ä‡®ü ‡®π‡®æ‡®≤‡®æ‡®§‡®æ‡®Ç ‡®¶‡®æ ‡®á‡©∞‡®§‡®ú‡®º‡®æ‡®∞ ‡®ï‡®∞‡©ã'
      }
    };

    return advice[currentAction] || advice['WAIT'];
  }
}

export default new PredictionService();
