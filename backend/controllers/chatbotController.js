// controllers/chatbotController.js - Main Chatbot Logic
import ChatSession from '../models/ChatSession.js';
import GeminiService from '../services/geminiService.js';
import { ResponseHandler } from '../utils/responseHandler.js';
import { catchAsync } from '../utils/errorHandler.js';
import { v4 as uuidv4 } from 'uuid';

class ChatbotController {
  // Initialize chat session
  initializeChat = catchAsync(async (req, res, next) => {
    const { currentPage = 'landing', language = 'en' } = req.body;
    const user = req.user || null; // null for non-authenticated users
    
    // Generate unique session ID
    const sessionId = uuidv4();
    
    // Create new chat session
    const chatSession = new ChatSession({
      userId: user?.id || null,
      sessionId,
      context: {
        currentPage,
        userRole: user?.role || 'visitor',
        language,
        location: user?.location || {}
      }
    });

    await chatSession.save();

    // Initial greeting message based on page and user
    let greeting = '';
    if (currentPage === 'landing' && !user) {
      if (language === 'hi') {
        greeting = 'ЁЯМ╛ рдирдорд╕реНрддреЗ! рдореИрдВ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рдХрд╛ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред рдкреВрд░реА рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдпрд╛ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВред рдореИрдВ рдлрд┐рд░ рднреА рдЖрдкрдХреА рд╕рд╛рдорд╛рдиреНрдп рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ!';
      } else if (language === 'pa') {
        greeting = 'ЁЯМ╛ ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ риХрйНри░ри┐ри╕ри╝рйА ри╕ри╣ри╛риЗриХ рижри╛ AI риЕри╕ри┐ри╕риЯрйИриВриЯ ри╣ри╛риВред рикрйВри░рйА ри╕рйБри╡ри┐ризри╛ри╡ри╛риВ ри▓риИ риХри┐ри░рикри╛ риХри░риХрйЗ ри▓ри╛риЧриЗрии риЬри╛риВ ри░риЬри┐ри╕риЯри░ риХри░рйЛред риорйИриВ рилри┐ри░ ри╡рйА ридрйБри╣ри╛рибрйА ри╕ри╛ризри╛ри░рии риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ!';
      } else {
        greeting = 'ЁЯМ╛ Hello! I\'m Krishi Sahayak AI Assistant. Please login or register to access full farming features. I can still help you with general queries!';
      }
    } else {
      const userName = user?.name || 'Friend';
      if (language === 'hi') {
        greeting = `ЁЯМ╛ рдирдорд╕реНрддреЗ ${userName}! рдореИрдВ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рдХрд╛ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред рдЦреЗрддреА, рдореМрд╕рдо, рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ, рдпрд╛ рд╣рдорд╛рд░реА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ!`;
      } else if (language === 'pa') {
        greeting = `ЁЯМ╛ ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓ ${userName}! риорйИриВ риХрйНри░ри┐ри╕ри╝рйА ри╕ри╣ри╛риЗриХ рижри╛ AI риЕри╕ри┐ри╕риЯрйИриВриЯ ри╣ри╛риВред риЦрйЗридрйА, риорйМри╕рио, риори╛ри░риХри┐риЯ рижрйАриЖриВ риХрйАриоридри╛риВ, риЬри╛риВ ри╕ри╛рибрйА ри╡рйИримри╕ри╛риИриЯ римри╛ри░рйЗ риХрйБриЭ ри╡рйА рикрйБрй▒риЫрйЛ!`;
      } else {
        greeting = `ЁЯМ╛ Hello ${userName}! I'm Krishi Sahayak AI Assistant. Ask me anything about farming, weather, market prices, or our website features!`;
      }
    }

    // Add greeting as first message
    await chatSession.addMessage('assistant', greeting, language, false);

    ResponseHandler.success(res, {
      sessionId,
      greeting,
      context: chatSession.context
    }, 'Chat session initialized successfully');
  });

  // Send message to chatbot
  sendMessage = catchAsync(async (req, res, next) => {
    const { sessionId, message, language = 'en', isVoice = false } = req.body;
    
    if (!sessionId || !message) {
      return ResponseHandler.error(res, 'Session ID and message are required', 400);
    }

    // Find chat session
    const chatSession = await ChatSession.findOne({ sessionId });
    if (!chatSession) {
      return ResponseHandler.error(res, 'Chat session not found', 404);
    }

    // Add user message to session
    await chatSession.addMessage('user', message, language, isVoice);

    // Get user context
    const user = req.user || null;
    const currentPage = chatSession.context.currentPage || 'landing';

    // Create system context
    const systemContext = GeminiService.createSystemContext(user, currentPage, language);

    // Get conversation history
    const conversationHistory = chatSession.getRecentMessages(10);

    // Generate AI response
    const aiResponse = await GeminiService.generateResponse(
      message, 
      systemContext, 
      conversationHistory
    );

    let botMessage = '';
    if (aiResponse.success) {
      botMessage = aiResponse.message;
    } else {
      // Use fallback response
      botMessage = aiResponse.message;
      console.error('AI Response Error:', aiResponse.error);
    }

    // Add bot response to session
    await chatSession.addMessage('assistant', botMessage, language, false);

    ResponseHandler.success(res, {
      message: botMessage,
      language,
      isVoice,
      sessionStats: {
        totalMessages: chatSession.metadata.totalMessages,
        tokensUsed: aiResponse.tokens || 0
      }
    }, 'Message processed successfully');
  });

  // Update chat context (when user navigates to different page)
  updateContext = catchAsync(async (req, res, next) => {
    const { sessionId, currentPage, language } = req.body;
    
    if (!sessionId) {
      return ResponseHandler.error(res, 'Session ID is required', 400);
    }

    const chatSession = await ChatSession.findOne({ sessionId });
    if (!chatSession) {
      return ResponseHandler.error(res, 'Chat session not found', 404);
    }

    // Update context
    await chatSession.updateContext({
      currentPage: currentPage || chatSession.context.currentPage,
      language: language || chatSession.context.language
    });

    ResponseHandler.success(res, {
      context: chatSession.context
    }, 'Context updated successfully');
  });

  // Get chat history
  getChatHistory = catchAsync(async (req, res, next) => {
    const { sessionId } = req.params;
    
    const chatSession = await ChatSession.findOne({ sessionId });
    if (!chatSession) {
      return ResponseHandler.error(res, 'Chat session not found', 404);
    }

    const messages = chatSession.getRecentMessages(50); // Last 50 messages

    ResponseHandler.success(res, {
      messages,
      context: chatSession.context,
      metadata: chatSession.metadata
    }, 'Chat history retrieved successfully');
  });

  // End chat session
  endSession = catchAsync(async (req, res, next) => {
    const { sessionId } = req.body;
    
    const chatSession = await ChatSession.findOne({ sessionId });
    if (!chatSession) {
      return ResponseHandler.error(res, 'Chat session not found', 404);
    }

    // Mark session as inactive
    chatSession.metadata.isActive = false;
    await chatSession.save();

    ResponseHandler.success(res, null, 'Chat session ended successfully');
  });

  // Get quick actions based on current page and user role
  getQuickActions = catchAsync(async (req, res, next) => {
    const { currentPage = 'landing', language = 'en' } = req.query;
    const user = req.user || null;

    const quickActions = this.generateQuickActions(currentPage, user?.role || 'visitor', language);

    ResponseHandler.success(res, {
      quickActions,
      currentPage,
      userRole: user?.role || 'visitor'
    }, 'Quick actions retrieved successfully');
  });

  // Generate quick action buttons based on context
  generateQuickActions(currentPage, userRole, language) {
    const actions = {
      en: {
        landing: [
          { text: "ЁЯФР How to register?", action: "how_to_register" },
          { text: "ЁЯМ╛ What is Krishi Sahayak?", action: "what_is_platform" },
          { text: "ЁЯУ▒ Available features", action: "platform_features" }
        ],
        dashboard: [
          { text: "ЁЯМдя╕П Today's weather", action: "todays_weather" },
          { text: "ЁЯТ░ Market prices", action: "market_prices" },
          { text: "ЁЯМ▒ Crop recommendations", action: "crop_recommendations" },
          { text: "ЁЯФм Disease detection help", action: "disease_detection" }
        ],
        'market-prices': [
          { text: "ЁЯУК Current wheat prices", action: "wheat_prices" },
          { text: "ЁЯМ╛ Best selling time", action: "selling_time" },
          { text: "ЁЯдЭ B2B marketplace", action: "b2b_marketplace" }
        ],
        weather: [
          { text: "ЁЯМзя╕П Rainfall prediction", action: "rainfall_prediction" },
          { text: "ЁЯЪЬ Farming advice", action: "farming_advice" },
          { text: "тЪая╕П Weather alerts", action: "weather_alerts" }
        ]
      },
      hi: {
        landing: [
          { text: "ЁЯФР рд░рдЬрд┐рд╕реНрдЯрд░ рдХреИрд╕реЗ рдХрд░реЗрдВ?", action: "how_to_register" },
          { text: "ЁЯМ╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рдХреНрдпрд╛ рд╣реИ?", action: "what_is_platform" },
          { text: "ЁЯУ▒ рдЙрдкрд▓рдмреНрдз рд╕реБрд╡рд┐рдзрд╛рдПрдВ", action: "platform_features" }
        ],
        dashboard: [
          { text: "ЁЯМдя╕П рдЖрдЬ рдХрд╛ рдореМрд╕рдо", action: "todays_weather" },
          { text: "ЁЯТ░ рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ", action: "market_prices" },
          { text: "ЁЯМ▒ рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡", action: "crop_recommendations" },
          { text: "ЁЯФм рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдорджрдж", action: "disease_detection" }
        ]
      },
      pa: {
        landing: [
          { text: "ЁЯФР ри░риЬри┐ри╕риЯри░ риХри┐ри╡рйЗриВ риХри░рйАриП?", action: "how_to_register" },
          { text: "ЁЯМ╛ риХрйНри░ри┐ри╕ри╝рйА ри╕ри╣ри╛риЗриХ риХрйА ри╣рйИ?", action: "what_is_platform" },
          { text: "ЁЯУ▒ риЙрикри▓римриз ри╕рйБри╡ри┐ризри╛ри╡ри╛риВ", action: "platform_features" }
        ],
        dashboard: [
          { text: "ЁЯМдя╕П риЕрй▒риЬ рижри╛ риорйМри╕рио", action: "todays_weather" },
          { text: "ЁЯТ░ риори╛ри░риХри┐риЯ рижрйАриЖриВ риХрйАриоридри╛риВ", action: "market_prices" },
          { text: "ЁЯМ▒ рилри╕ри▓ ри╕рйБриЭри╛риЕ", action: "crop_recommendations" },
          { text: "ЁЯФм ри░рйЛриЧ рикриЫри╛риг риорижриж", action: "disease_detection" }
        ]
      }
    };

    return actions[language]?.[currentPage] || actions['en']['landing'];
  }

  // Handle quick action clicks
  handleQuickAction = catchAsync(async (req, res, next) => {
    const { sessionId, action, language = 'en' } = req.body;
    
    const responses = {
      en: {
        how_to_register: "ЁЯФР To register on Krishi Sahayak: Click 'Register' button тЖТ Fill your details тЖТ Verify OTP тЖТ Start farming smart! Need help with any step?",
        what_is_platform: "ЁЯМ╛ Krishi Sahayak is India's smartest multilingual farming platform offering AI-powered crop advice, weather alerts, market prices, disease detection, soil health guidance, and government scheme information!",
        platform_features: "ЁЯУ▒ Key Features: ЁЯМдя╕П Weather Alerts, ЁЯТ░ Market Prices, ЁЯФм Disease Detection, ЁЯМ▒ Crop Recommendations, ЁЯТК NPK Calculator, ЁЯПЫя╕П Government Schemes, ЁЯдЦ Voice Assistant",
        todays_weather: "ЁЯМдя╕П For today's weather and farming advice, visit our Weather section. I can also help you understand weather-based farming decisions!",
        market_prices: "ЁЯТ░ Check real-time crop prices in our Market section. I can help you understand price trends and suggest best selling times!",
        crop_recommendations: "ЁЯМ▒ For personalized crop recommendations based on your soil and location, visit our Crop Advisory section!",
        disease_detection: "ЁЯФм Upload crop photos in our Disease Detection section for AI-powered diagnosis and treatment recommendations!"
      },
      hi: {
        how_to_register: "ЁЯФР рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рдкрд░ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП: 'рд░рдЬрд┐рд╕реНрдЯрд░' рдмрдЯрди рджрдмрд╛рдПрдВ тЖТ рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рднрд░реЗрдВ тЖТ OTP рд╡реЗрд░рд┐рдлрд╛рдИ рдХрд░реЗрдВ тЖТ рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рд╢реБрд░реВ рдХрд░реЗрдВ! рдХрд┐рд╕реА рднреА рдХрджрдо рдореЗрдВ рдорджрдж рдЪрд╛рд╣рд┐рдП?",
        what_is_platform: "ЁЯМ╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рднрд╛рд░рдд рдХрд╛ рд╕рдмрд╕реЗ рд╕реНрдорд╛рд░реНрдЯ рдмрд╣реБрднрд╛рд╖реА рдЦреЗрддреА рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рд╣реИ рдЬреЛ AI-рдкрд╛рд╡рд░реНрдб рдлрд╕рд▓ рд╕рд▓рд╛рд╣, рдореМрд╕рдо рдЕрд▓рд░реНрдЯ, рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ, рд░реЛрдЧ рдкрд╣рдЪрд╛рди, рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИ!",
        platform_features: "ЁЯУ▒ рдореБрдЦреНрдп рд╕реБрд╡рд┐рдзрд╛рдПрдВ: ЁЯМдя╕П рдореМрд╕рдо рдЕрд▓рд░реНрдЯ, ЁЯТ░ рдмрд╛рдЬрд╛рд░ рдХреА рдХреАрдорддреЗрдВ, ЁЯФм рд░реЛрдЧ рдкрд╣рдЪрд╛рди, ЁЯМ▒ рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡, ЁЯТК NPK рдХреИрд▓рдХреБрд▓реЗрдЯрд░, ЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ, ЁЯдЦ рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпрдХ"
      },
      pa: {
        how_to_register: "ЁЯФР риХрйНри░ри┐ри╕ри╝рйА ри╕ри╣ри╛риЗриХ 'ридрйЗ ри░риЬри┐ри╕риЯри░ риХри░рии ри▓риИ: 'ри░риЬри┐ри╕риЯри░' римриЯрии рижримри╛риУ тЖТ риЖрикригрйА риЬри╛ригриХри╛ри░рйА ринри░рйЛ тЖТ OTP ри╡рйИри░рйАрилри╛риИ риХри░рйЛ тЖТ ри╕риори╛ри░риЯ риЦрйЗридрйА ри╕ри╝рйБри░рйВ риХри░рйЛ!",
        what_is_platform: "ЁЯМ╛ риХрйНри░ри┐ри╕ри╝рйА ри╕ри╣ри╛риЗриХ ринри╛ри░рид рижри╛ ри╕рин ридрйЛриВ ри╕риори╛ри░риЯ римри╣рйБринри╛ри╕ри╝рйА риЦрйЗридрйА рикри▓рйЗриЯрилри╛ри░рио ри╣рйИ риЬрйЛ AI-рикри╛ри╡ри░риб рилри╕ри▓ ри╕ри▓ри╛ри╣, риорйМри╕рио риЕри▓ри░риЯ, риори╛ри░риХри┐риЯ риХрйАриоридри╛риВ рикрйНри░рижри╛рии риХри░рижри╛ ри╣рйИ!"
      }
    };

    const response = responses[language]?.[action] || responses['en'][action] || "I can help you with that! Please ask me your specific question.";

    // If session provided, add to conversation
    if (sessionId) {
      const chatSession = await ChatSession.findOne({ sessionId });
      if (chatSession) {
        await chatSession.addMessage('assistant', response, language, false);
      }
    }

    ResponseHandler.success(res, {
      message: response,
      action,
      language
    }, 'Quick action processed successfully');
  });

  // Health check for chatbot service
  healthCheck = catchAsync(async (req, res, next) => {
    const geminiStatus = await GeminiService.healthCheck();
    
    ResponseHandler.success(res, {
      status: 'healthy',
      geminiAI: geminiStatus,
      timestamp: new Date().toISOString()
    }, 'Chatbot service is running');
  });
}

export default new ChatbotController();
